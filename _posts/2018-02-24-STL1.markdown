---
title:  "[C++] STL for Problem Solving (1)"
key: 20180701
tags: c++ STL
---


*알고리즘 문제를 풀기 위해 자주 사용되는 STL 문법에 대해서 포스팅 1* 👻

<!--more-->

*Standard Template Library*  
*알고리즘, 컨테이너, 함수, 이터레이터로 이루어져 있음*  

# STL (0) C++  
+ C++11 을 기준으로 작성  

## auto  

+ 자동 데이터 형 추론 (컴파일러가 타입을 추론하여 결정)  

{% highlight c++ linenos %}
auto x = 0, y = 0; //변수의 타입을 명확하게 알 수 있도록 초기화
cin >> x >> y;
cout << x + y << '\n';
{% endhighlight %}  

+ iterator 사용시 편리  

{% highlight c++ linenos %}
map<pair<int,int>,vector<pair<int,string>>>> d;

for(auto x = d.begin(); x != d.end(); x++){ //이렇게 사용

}
{% endhighlight %}  

## Range-based for (foreach 문)  

+ 복사와 참조  

{% highlight c++ linenos %}
vector<pair<int,int>> v = { {1,2},{3,4},{5,6} };
for(auto x : v){ //v의 index마다의 값을 복사
//for(auto &x : v) 로 사용하면 값을 참조 (속도면에서 이점)
    cout << x.first() + x.second() << ' ';
}
cout << '\n';
{% endhighlight %}  

## Lambda Function (익명 함수)  

+ form : [ _캡쳐_ ] ( _함수 인자_ ) { _함수 내용_ };

{% highlight c++ linenos %}
//usage 1 : 출력
cout << [](int x, int y){
    return x + y;
}(1,2) << '\n'

//usage 2 : 선언 후 출력
auto sum2 = [](int x, int y){
    return x+y;
};
cout << sum2(1,2) << '\n';
{% endhighlight %}  

+ 캡쳐 사용법 : & (참조), = (복사:default)  

{% highlight c++ linenos %}
int x;
// [&] : 함수 외부의 변수를 모두 참조할 수 있다.
// 여러개 일때는 ,로 구분
auto is_less = [&](int num){
    return num < x;
}
{% endhighlight %}  

+ 람다 함수  
함수의 변수 타입은 #include <`functional`> 에 선언  
form : function<리턴타입(콤마로 구분한 인자의 타입)> name

{% highlight c++ linenos %}
//usage 1
function<int(int, int)> sum = [](int x, int y){
    return x+y;
};

//usage 2 : f는 외부함수 / 즉, 재귀 호출하기 위해서 [&] 참조가 필요.
function<int(int)> f = [&](int n){
    if(n<=1) return n;
    else f(n-1)+f(n-2);
};

//usage 3 : 벡터에 대입
vector<function<int(int,int)>> d;
d.push_back([](int x, int y){
    return x+y;
});
d.push_back([](int x, int y){
    return x-y;
});
d.push_back([](int x, int y){
    return x*y;
});
d.push_back([](int x, int y){
    return x/y;
});

for(auto &f : d){
    cout << f(a,b) << " ";
}
cout << '\n';
{% endhighlight %}  
