---
title:  "[C++] STL for Problem Solving (3)"
key: 20180701
tags: c++ STL
---

*알고리즘 문제를 풀기 위해 자주 사용되는 STL 문법에 대해서 포스팅 3* :ghost:

<!--more-->

*Standard Template Library : Algorithm 편*

## STL (2) Algorithm

## count

+ [begin, end)에 포함되어 있는 원소 중에서 value의 갯수를 찾는다.  

```c++
count(begin, end, value) // O(N)
```  

+ [begin, end)에 포함되어 있는 원소 중에서 조건 p에 해당하는 것의 갯수를 찾는다.  

```c++
count_if(begin, end, p) // O(N)
```

+ count_if는 람다 함수와 함께 사용 가능  

```c++
int even = count_if(v.begin(), v.end(), [](int x){
    return x%2 == 0;
}); // true인 갯수를 반환. (즉, 짝수)
```

## find  

+ vector 나 deque 같은 container에서 주로 사용.
+ [begin, end)에 포함되어 있는 원소 중에서 value의 이터레이터  
```c++
find(begin, end, value) // O(N)
```  
+ [begin, end)에 포함되어 있는 원소 중에서 조건 p에 해당하는 것의 이터레이터  
```c++
find_if(begin, end, p) // O(N)
```  
+ 두 함수 모두 못 찾으면 end를 리턴  
+ find_if는 람다 함수와 함께 사용 가능  

## fill

+ [begin, end)를 value로 채우는 함수.  
```c++
fill(begin, end, value) // O(N)
```  
+ cstring에 선언된 memset은 0과 -1로 초기화 할 때 이외에는 원하는 대로 동작하지 않는다.  

## reverse

+ [begin, end)의 순서를 역순으로 만든다.  
```c++
reverse(begin, end); // O(N)
```  

## rotate  

+ [begin, end)를 mid 기준으로 왼쪽으로 회전시키는 함수.  
begin에는 mid값이, end-1에는 mid-1값이 들어가게된다.
```c++
rotate(begin, mid, end) // O(N)
```  
+ rbegin과 rend를 사용하면 오른쪽으로 회전시킬 수 있다.  

## swap  

+ a와 b의 값을 바꿈  
```c++
swap(a,b)
```  

## unique  

+ 좌표 압축할 때 많이 사용하는 함수.  
범위를 1~n 까지 줄이는 방법.
+ [begin, end)구간에서 연속되는 같은 값을 하나를 제외하고 제거.  
실제 컨테이너의 크기를 줄이거나 제거하지 않는다.  
중복을 덮어씌우거나 시프트 시키는 방식으로 작동한다.  
중복을 제거한 후의 end 이터레이터를 리턴한다.  
+ 정렬이 되어있지 않으면 붙어있는 값만 제외시켜준다. -> 정렬한 뒤에 사용하는 것이 의도한 결과를 나타낸다.  

```c++
vector<int> v = {1,1,2,2,2,3,1,1,1,2,2,2,2};
sort(v.begin(), v.end());
auto last = unique(v.begin, v.end());
//중복 제거후의 end 이터레이터를 리턴
v.erase(last, v.end());
for(int x : v){
    cout << x << ' ';
}
cout << '\n';

/*
1. sort 없을 때 : 1 2 3 1 2
2. erase 없을 때 : 1 2 3 1 2 (3 1 1 1 2 2 2 2)
   실제 컨테이너의 크기를 줄이거나 제거하지 않는다.
*/
```  

## sort  

+ [begin, end)를 오름차순 정렬 (작은 수가 앞에..)  
```c++
sort(begin, end)
```  
+ [begin, end)를 cmp 기준으로 정렬  
```c++
sort(begin, end, cmp)
```  
+ 내림차순 정렬  
```c++
//1
sort(begin, end, greater<int>());
//2
sort(begin, end, [](int x, int y){
    return x > y;
})
//3
bool cmp(const int &x, const int &y){
    return x > y;
}
sort(begin, end, cmp);
```

## stable_sort  

+ 버블정렬, 머지소트가 대표적 stable sort 알고리즘이다.
+ 같은 것이 있는 경우 입력으로 주어진 순서가 유지되는 정렬 알고리즘  
```c++
stable_sort(begin, end)
stable_sort(begin, end, cmp)
```  

## binary_search

+ 정렬이 되어있는 상태에서 시작.  
+ [begin, end)에서 value를 찾으면 true, 못 찾으면 false  
```c++
binary_serach(begin, end, value)
```  
+ [begin, end)에서 value를 cmp를 기준으로 찾으면 true, 못 찾으면 false  
```c++
binary_search(begin, end, value, cmp)
```  

## lower_bound / upper_bound  

+ binary search를 이용해서 구현되어있다.  
+ 따라서 위치를 찾고싶을때 사용한다.  
+ lower_bound : [begin, end)에서 value보다 작지 않은 첫 번째 이터레이터  
```c++
lower_bound(begin, end, value)
lower_bound(begin, end, value, cmp)
```  
+ upper_bound : [begin, end)에서 value보다 큰 첫 번째 이터레이터  
```c++
upper_bound(begin, end, value)
upper_bound(begin, end, value, cmp)
```  

+ 특징 : 정렬이 되어있는 자료구조에서 u_b - l_b 하면 해당 숫자가 몇개 들어있는지 알 수 있다.  

## equal_range  

+ lower_bound, upper_bound를 pair 형태로 리턴한다.  
```c++
equal_range(begin, end, value)
equal_range(begin, end, value, cmp)
```  

## min / max  

```c++
min(a, b)
min(a, b, cmp)
min(initializer_list) // --> min({1,2,3})
min(initializer_list, cmp)
max(a, b)
max(a, b, cmp)
max(initializer_list)
max(initializer_list, cmp)
```

## minmax  

+ min과 max를 동시에 구해서 pair 형태로 리턴한다.  
```c++
minmax(a, b)
minmax(a, b, cmp)
minmax(initializer_list)
minmax(initializer_list, cmp)
```

## min_element / max_element  

+ [begin, end)에서 최대값/최소값의 이터레이터를 리턴한다.  
```c++
min_element(begin, end)
min_element(begin, end, cmp)
max_element(begin, end)
max_element(begin, end, cmp)
```

## minmax_element  

+ [begin, end)에서 최대값, 최소값의 이터레이터를 리턴한다.  

## next_permutation  

+ [begin, end)를 순열이라고 생각했을 때, 사전 순으로 다움에 오는 순열을 만든다.  
+ 마지막 순열일 경우, false를 리턴한다.  
```c++
next_permutation(begin, end)
next_permutation(begin, end, cmp)
prev_permutation(begin, end)
prev_permutation(begin, end, cmp)
```  

+ do ~ while문을 사용한다.  
+ `외판원 순회` : 모든 경우를 다해야하는데 순서가 중요할 때 주로 쓰인다.  

```c++
vector<int> v = {3,1,2};
sort(v.begin(), v.end());

do{
    for(int x : a){
        cout << x << ' ';
    }
    cout << '\n';
}while(next_permutation(v.begin(), v.end()));
```  
